package db61b;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import static db61b.Utils.*;

/** A single table in a database.
 *  @author P. N. Hilfinger
 */
class Table implements Iterable<Row> {
    /** A new Table whose columns are given by COLUMNTITLES, which may
     *  not contain dupliace names. */
    Table(String[] columnTitles) {
        for (int i = columnTitles.length - 1; i >= 1; i -= 1) {
            for (int j = i - 1; j >= 0; j -= 1) {
                if (columnTitles[i].equals(columnTitles[j])) {
                    throw error("duplicate column name: %s",
                                columnTitles[i]);
                }
            }
        }
        _columnTitles = columnTitles;
    }

    /** A new Table whose columns are give by COLUMNTITLES. */
    Table(List<String> columnTitles) {
        this(columnTitles.toArray(new String[columnTitles.size()]));
    }

    /** Return the number of columns in this table. */
    public int columns() {
        return _columnTitles.length;
    }

    /** Return the title of the Kth column.  Requires 0 <= K < columns(). */
    public String getTitle(int k) {
        if (k < 0 | k > this.columns()) {
            throw error("Get title out of range.");
        }
        return _columnTitles[k];
    }

    /** Return the number of the column whose title is TITLE, or -1 if
     *  there isn't one. */
    public int findColumn(String title) {
        for (int i = 0; i < _columnTitles.length; i++) {
            if (_columnTitles[i].equals(title)) {
                return i;
            }
        }
        return -1;
    }

    /** Return the number of Rows in this table. */
    public int size() {
        return _rows.size();
    }

    /** Returns an iterator that returns my rows in an unspecfied order. */
    @Override
    public Iterator<Row> iterator() {
        return _rows.iterator();
    }

    /** Add ROW to THIS if no equal row already exists.  Return true if anything
     *  was added, false otherwise. */
    public boolean add(Row row) {
        if (row.size() != this.columns()) {
            throw error("illegal length for row");
        }
    	if (_rows.contains(row)) {
            return false;
        } else {
            _rows.add(row);
            return true;
        }
    }

    /** Read the contents of the file NAME.db, and return as a Table.
     *  Format errors in the .db file cause a DBException. */
    static Table readTable(String name) {
        BufferedReader input;
        Table table;
        input = null;
        table = null;
        try {
            input = new BufferedReader(new FileReader(name + ".db"));
            String header = input.readLine();
            if (header == null) {
                throw error("missing header in DB file");
            }
            String[] columnNames = header.split(",");
            table = new Table(columnNames);
            String rowStr;
            while ((rowStr = input.readLine()) != null) {
            	String[] rowVal = rowStr.split(",");
            	table.add(new Row(rowVal));
            }           
        } catch (FileNotFoundException e) {
            throw error("could not find %s.db", name);
        } catch (IOException e) {
            throw error("problem reading from %s.db", name);
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    /* Ignore IOException */
                }
            }
        }
        return table;
    }

    /** Write the contents of TABLE into the file NAME.db. Any I/O errors
     *  cause a DBException. */
    void writeTable(String name) {
        PrintStream output;
        output = null;
        try {
            String sep;
            sep = "";
            output = new PrintStream(name + ".db");
            sep += _columnTitles[0];
            for (int i = 1; i < _columnTitles.length; i++) {
            	sep += ("," + _columnTitles[i]); 
            }
            for (Row r : _rows) {
            	sep += "\n";
            	sep += r.get(0);
            	for (int k = 1; k < r.size(); k++) {
            	    sep += ("," + r.get(k));
            	}
            }
            output.append(sep);
        } catch (IOException e) {
            throw error("trouble writing to %s.db", name);
        } finally {
            if (output != null) {
                output.close();
            }
        }
    }

    /** Print my contents on the standard output, using TITLE as the title. */
    void print() {
        for (Row row : _rows) {
            String s = Arrays.toString(row.getRow());
            System.out.println("  " + (s.substring(1, s.length() - 1).replaceAll(",", "")));
        }
    }

    /** Return a new Table whose columns are COLUMNNAMES, selected from
     *  rows of this table that satisfy CONDITIONS. */
    Table select(List<String> columnNames, List<Condition> conditions) {
        Table result = new Table(columnNames);
        ArrayList<Column> columns = new ArrayList<>();
        Column col;
        for (String name: columnNames) {
            col = new Column(name, this);
            columns.add(col);
        }        
        for (Row row : this) {
            if (conditions == null || Condition.test(conditions, row)) {
                ArrayList<String> rowVal = new ArrayList<>();
        	for (Column column : columns) {
        			rowVal.add(column.getFrom(row));
        		}
        		result.add(new Row(rowVal.toArray(new String[rowVal.size()])));
        	}
        }
        return result;
    }

    /** Return a new Table whose columns are COLUMNNAMES, selected
     *  from pairs of rows from this table and from TABLE2 that match
     *  on all columns with identical names and satisfy CONDITIONS. */
    Table select(Table table2, List<String> columnNames,
                 List<Condition> conditions) {
        Table result = new Table(columnNames);
        ArrayList<Column> columns = new ArrayList<>();
        Column col;
        for (String name: columnNames) {
        	col = new Column(name, this, table2);
        	columns.add(col);
        } 
        
        ArrayList<Column> common1 = new ArrayList<>();
        ArrayList<Column> common2 = new ArrayList<>();
        
        for (String title : this._columnTitles) {
        	if (table2.findColumn(title) != -1) {
        		common1.add(new Column(title, this));
        		common2.add(new Column(title, table2));
        	}
        }
        for (Row row1 : this) {
        	for (Row row2 : table2) {
        		if (equijoin(common1, common2, row1, row2) 
        				&& (conditions == null || Condition.test(conditions, row1, row2))) {
        			result.add(new Row(columns, row1, row2));
        		}
        	}
        }
        return result;
    }

    /** Return true if the columns COMMON1 from ROW1 and COMMON2 from
     *  ROW2 all have identical values.  Assumes that COMMON1 and
     *  COMMON2 have the same number of elements and the same names,
     *  that the columns in COMMON1 apply to this table, those in
     *  COMMON2 to another, and that ROW1 and ROW2 come, respectively,
     *  from those tables. */
    private static boolean equijoin(List<Column> common1, List<Column> common2,
                                    Row row1, Row row2) {
    	
        Iterator<Column> ite1 = common1.iterator();
        Iterator<Column> ite2 = common2.iterator();
        while (ite1.hasNext() && ite2.hasNext()) {
        	Column tep1 = ite1.next();
        	Column tep2 = ite2.next();
        	if (!tep1.getFrom(row1).equals(tep2.getFrom(row2))) {
        		return false;
        	}
        }
        return true;
    }

    /** My rows. */
    private HashSet<Row> _rows = new HashSet<>();
    private String[] _columnTitles;
}

